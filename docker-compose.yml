version: "3.9"

services:
  # ===============================
  # Banco de Dados (PostgreSQL)
  # ===============================
  db:
    image: postgres:16
    container_name: rehab-postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-1234}
      POSTGRES_DB: ${POSTGRES_DB:-rehabdb}
    ports:
      - "5432:5432"
    volumes:
      - rehab_pgdata:/var/lib/postgresql/data
    networks:
      - rehab-network

  # ===============================
  # Mensageria (RabbitMQ)
  # ===============================
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rehab-rabbit
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-guest}
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - rehab-network

  # ===============================
  # MinIO (S3 compat√≠vel para dev)
  # ===============================
  minio:
    image: minio/minio:RELEASE.2024-09-22T00-33-43Z
    container_name: rehab-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID:-minioadmin}
      MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY:-minioadmin}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - rehab-network

  # ===============================
  # API Gateway
  # ===============================
  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      JWT_SECRET: ${JWT_SECRET:-my-secret-key}
      SERVER_PORT: 8080
      AUTH_SERVICE_URL: http://auth-service:8081
      PATIENT_SERVICE_URL: http://patient-service:8082
      FILE_SERVICE_URL: http://file-service:8083
      PRESCRIPTION_SERVICE_URL: http://prescription-service:8084
      NOTIFICATION_SERVICE_URL: http://notification-service:8085
      PLAN_SERVICE_URL: http://plan-service:8086
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: prometheus,health,info
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT:-http://otel-collector:4317}
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      TRACING_SAMPLING_PROBABILITY: ${TRACING_SAMPLING_PROBABILITY:-1.0}
    depends_on:
      - auth-service
    networks:
      - rehab-network

  # ===============================
  # Auth Service
  # ===============================
  auth-service:
    build: ./auth-service
    container_name: auth-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/${POSTGRES_DB:-rehabdb}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-postgres}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-1234}
      JWT_SECRET: ${JWT_SECRET:-my-secret-key}
      SPRING_PROFILES_ACTIVE: docker
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: prometheus,health,info
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT:-http://otel-collector:4317}
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      TRACING_SAMPLING_PROBABILITY: ${TRACING_SAMPLING_PROBABILITY:-1.0}
    depends_on:
      - db
    networks:
      - rehab-network

  # ===============================
  # Patient Service
  # ===============================
  patient-service:
    build: ./patient-service
    container_name: patient-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/${POSTGRES_DB:-rehabdb}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-postgres}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-1234}
      SPRING_RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_PASS: ${RABBITMQ_PASS:-guest}
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: prometheus,health,info
      SPRING_PROFILES_ACTIVE: docker
      JWT_SECRET: ${JWT_SECRET:-my-secret-key}
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT:-http://otel-collector:4317}
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      TRACING_SAMPLING_PROBABILITY: ${TRACING_SAMPLING_PROBABILITY:-1.0}
    depends_on:
      - db
      - rabbitmq
    networks:
      - rehab-network

  # ===============================
  # File Service
  # ===============================
  file-service:
    build: ./file-service
    container_name: file-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/${POSTGRES_DB:-rehabdb}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-postgres}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-1234}
      SPRING_RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_PASS: ${RABBITMQ_PASS:-guest}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-minioadmin}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-minioadmin}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      S3_ENDPOINT: ${S3_ENDPOINT:-http://minio:9000}
      S3_BUCKET: ${S3_BUCKET:-rehab-files}
      JWT_SECRET: ${JWT_SECRET:-my-secret-key}
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: prometheus,health,info
      SPRING_PROFILES_ACTIVE: docker
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT:-http://otel-collector:4317}
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      TRACING_SAMPLING_PROBABILITY: ${TRACING_SAMPLING_PROBABILITY:-1.0}
    depends_on:
      - db
      - rabbitmq
      - minio
    networks:
      - rehab-network

  # ===============================
  # Prescription Service
  # ===============================
  prescription-service:
    build: ./prescription-service
    container_name: prescription-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/${POSTGRES_DB:-rehabdb}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-postgres}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-1234}
      SPRING_RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_PASS: ${RABBITMQ_PASS:-guest}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-minioadmin}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-minioadmin}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      S3_ENDPOINT: ${S3_ENDPOINT:-http://minio:9000}
      S3_BUCKET: ${S3_BUCKET:-rehab-files}
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: prometheus,health,info
      SPRING_PROFILES_ACTIVE: docker
      USE_TEXTRACT: ${USE_TEXTRACT:-false}
      USE_BEDROCK: ${USE_BEDROCK:-false}
      BEDROCK_MODEL_ID: ${BEDROCK_MODEL_ID:-anthropic.claude-3-haiku}
      GUARDRAILS_ENABLED: ${GUARDRAILS_ENABLED:-true}
      TESSDATA_PATH: ${TESSDATA_PATH:-/opt/tessdata}
      OCR_LANG: ${OCR_LANG:-por+eng}
      OCR_HEURISTIC_MIN_CHARS_NO_WS: ${OCR_HEURISTIC_MIN_CHARS_NO_WS:-30}
      OCR_HEURISTIC_MIN_LETTER_RATIO: ${OCR_HEURISTIC_MIN_LETTER_RATIO:-0.15}
      OCR_HEURISTIC_MIN_UNIQUE_CHARS: ${OCR_HEURISTIC_MIN_UNIQUE_CHARS:-10}
      OCR_HEURISTIC_MIN_NONWS_DENSITY: ${OCR_HEURISTIC_MIN_NONWS_DENSITY:-0.30}
      OCR_FALLBACK_MIN_CONFIDENCE: ${OCR_FALLBACK_MIN_CONFIDENCE:-0.2}
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT:-http://otel-collector:4317}
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      TRACING_SAMPLING_PROBABILITY: ${TRACING_SAMPLING_PROBABILITY:-1.0}
      NORMALIZATION_USE_LLM: ${NORMALIZATION_USE_LLM:-false}
      OCR_MAX_PAGES: ${OCR_MAX_PAGES:-5}
      OCR_TEXTRACT_USE_ANALYZE: ${OCR_TEXTRACT_USE_ANALYZE:-true}
    volumes:
      - ./tessdata:/opt/tessdata:ro
    depends_on:
      - db
      - rabbitmq
      - minio
    networks:
      - rehab-network

  # ===============================
  # Plan Service
  # ===============================
  plan-service:
    build: ./plan-service
    container_name: plan-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/${POSTGRES_DB:-rehabdb}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-postgres}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-1234}
      SERVER_PORT: 8086
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: prometheus,health,info
      SPRING_PROFILES_ACTIVE: docker
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT:-http://otel-collector:4317}
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      TRACING_SAMPLING_PROBABILITY: ${TRACING_SAMPLING_PROBABILITY:-1.0}
    depends_on:
      - db
    networks:
      - rehab-network

  # ===============================
  # Notification Service
  # ===============================
  notification-service:
    build: ./notification-service
    container_name: notification-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/${POSTGRES_DB:-rehabdb}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-postgres}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-1234}
      SPRING_RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_PASS: ${RABBITMQ_PASS:-guest}
      MAIL_USER: ${MAIL_USER}
      MAIL_PASS: ${MAIL_PASS}
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: prometheus,health,info
      SPRING_PROFILES_ACTIVE: docker
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT:-http://otel-collector:4317}
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      TRACING_SAMPLING_PROBABILITY: ${TRACING_SAMPLING_PROBABILITY:-1.0}
    depends_on:
      - db
      - rabbitmq
    networks:
      - rehab-network

  # ===============================
  # PROMETHEUS
  # ===============================
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - rehab-network
    depends_on:
      - api-gateway
      - auth-service
      - patient-service
      - file-service
      - prescription-service
      - plan-service
      - notification-service

  # ===============================
  # GRAFANA
  # ===============================
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - rehab-network

  # ===============================
  # OpenTelemetry + Jaeger (traces)
  # ===============================
  jaeger:
    image: jaegertracing/all-in-one:1.57
    container_name: jaeger
    ports:
      - "16686:16686" # Jaeger UI
      - "14250:14250" # gRPC
    networks:
      - rehab-network

  otel-collector:
    image: otel/opentelemetry-collector:0.104.0
    container_name: otel-collector
    command: ["--config=/etc/otelcol/config.yaml"]
    volumes:
      - ./monitoring/otel-collector-config.yaml:/etc/otelcol/config.yaml:ro
    ports:
      - "4317:4317" # OTLP gRPC receiver
    depends_on:
      - jaeger
    networks:
      - rehab-network

# ===============================
# Redes e Volumes
# ===============================
networks:
  rehab-network:
    driver: bridge

volumes:
  rehab_pgdata:
  minio_data:
